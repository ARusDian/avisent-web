{
	"info": {
		"_postman_id": "484adc7b-134c-4a3c-ba6b-63828f9c41cf",
		"name": "Avisent-admin",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6283507"
	},
	"item": [
		{
			"name": "Login Admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains token\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"token\");\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var token = jsonData.token;\r",
							"pm.environment.set(\"adminToken\", token);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const formData = {\r",
							"    name: \"admin\",\r",
							"    password: \"12121212\"\r",
							"};\r",
							"\r",
							"const formDataString = Object.keys(formData).map(key => {\r",
							"    return `${encodeURIComponent(key)}=${encodeURIComponent(formData[key])}`;\r",
							"}).join('&');\r",
							"\r",
							"pm.request.body = {\r",
							"    mode: 'urlencoded',\r",
							"    urlencoded: formDataString\r",
							"};"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "admin",
							"type": "text"
						},
						{
							"key": "password",
							"value": "12121212",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "localhost:8000/api/login",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users - Get all users (admin)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const bearerToken = pm.environment.get(\"adminToken\");\r",
							"\r",
							"pm.request.headers.add({\r",
							"    key: \"Authorization\",\r",
							"    value: `Bearer ${bearerToken}`\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields - success, message, and data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('success');\r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"    pm.expect(responseData).to.have.property('data');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the data array - each object should have id_user, name, type properties\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data).to.be.an('array');\r",
							"\r",
							"    responseData.data.forEach(function(user) {\r",
							"        pm.expect(user).to.have.property('id_user');\r",
							"        pm.expect(user).to.have.property('name');\r",
							"        pm.expect(user).to.have.property('type');\r",
							"\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8000/api/users",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users - Create new user (admin)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"  pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields - success, message, and data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('success');\r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"    pm.expect(responseData).to.have.property('data');\r",
							"});\r",
							"\r",
							"pm.test(\"Validate the data array - each object should have id_user, name, type properties\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data).to.have.property('id_user');\r",
							"    pm.expect(responseData.data).to.have.property('name');\r",
							"    pm.expect(responseData.data).to.have.property('type');\r",
							"\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const bearerToken = pm.environment.get(\"adminToken\");\r",
							"pm.request.headers.add({\r",
							"    key: \"Authorization\",\r",
							"    value: `Bearer ${bearerToken}`\r",
							"});\r",
							"\r",
							"const formData = {\r",
							"    name: \"operator-baru\",\r",
							"    password: \"12121212\",\r",
							"    type: 1,\r",
							"};\r",
							"\r",
							"const formDataString = Object.keys(formData).map(key => {\r",
							"    return `${encodeURIComponent(key)}=${encodeURIComponent(formData[key])}`;\r",
							"}).join('&');\r",
							"\r",
							"pm.request.body = {\r",
							"    mode: 'urlencoded',\r",
							"    urlencoded: formDataString\r",
							"};"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Mikail",
							"type": "text"
						},
						{
							"key": "password",
							"value": "12121212",
							"type": "text"
						},
						{
							"key": "type",
							"value": "1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "localhost:8000/api/users",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users - Update user (admin)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields - success, message, and data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('success');\r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"    pm.expect(responseData).to.have.property('data');\r",
							"});\r",
							"\r",
							"pm.test(\"Validate the data array - each object should have id_user, name, type properties\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data).to.have.property('id_user');\r",
							"    pm.expect(responseData.data).to.have.property('name');\r",
							"    pm.expect(responseData.data).to.have.property('type');\r",
							"\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const bearerToken = pm.environment.get(\"adminToken\");\r",
							"pm.request.headers.add({\r",
							"    key: \"Authorization\",\r",
							"    value: `Bearer ${bearerToken}`\r",
							"});\r",
							"\r",
							"const formData = {\r",
							"    _method: \"PUT\",\r",
							"    name: \"operator-baru-jadi-admin\",\r",
							"    password: \"13131313\",\r",
							"    type: 3,\r",
							"};\r",
							"\r",
							"const formDataString = Object.keys(formData).map(key => {\r",
							"    return `${encodeURIComponent(key)}=${encodeURIComponent(formData[key])}`;\r",
							"}).join('&');\r",
							"\r",
							"pm.request.body = {\r",
							"    mode: 'urlencoded',\r",
							"    urlencoded: formDataString\r",
							"};"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "localhost:8000/api/users/4",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"users",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users - Delete user (admin)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body schema for successful delete operation\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('success', true);\r",
							"    pm.expect(responseData).to.have.property('message', 'Data berhasil di hapus.');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const bearerToken = pm.environment.get(\"adminToken\");\r",
							"\r",
							"pm.request.headers.add({\r",
							"    key: \"Authorization\",\r",
							"    value: `Bearer ${bearerToken}`\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:8000/api/users/4",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"users",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "MLog - Get all manual logs  (admin)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields - success, message, and data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('success');\r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"    pm.expect(responseData).to.have.property('data');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the data array - each object should have id_manual_log, user_id, turret_id, start_date and end_date properties\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data).to.be.an('array');\r",
							"\r",
							"    responseData.data.forEach(function(log) {\r",
							"        pm.expect(log).to.have.property('id_manual_log');\r",
							"        pm.expect(log).to.have.property('user_id');\r",
							"        pm.expect(log).to.have.property('turret_id');\r",
							"        pm.expect(log).to.have.property('start_date');\r",
							"        pm.expect(log).to.have.property('end_date');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const bearerToken = pm.environment.get(\"adminToken\");\r",
							"\r",
							"pm.request.headers.add({\r",
							"    key: \"Authorization\",\r",
							"    value: `Bearer ${bearerToken}`\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8000/api/mlogs",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"mlogs"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout Admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body schema for successful logout operation\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('message', 'Berhasil Logout');\r",
							"});\r",
							"\r",
							"pm.environment.unset(\"adminToken\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const bearerToken = pm.environment.get(\"adminToken\");\r",
							"\r",
							"pm.request.headers.add({\r",
							"    key: \"Authorization\",\r",
							"    value: `Bearer ${bearerToken}`\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "localhost:8000/api/logout",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"logout"
					]
				}
			},
			"response": []
		}
	]
}