{
	"info": {
		"_postman_id": "c2333dc8-a3fa-4824-bc3c-cede15be8bee",
		"name": "Avisent-api-testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6283507"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Login - As admin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const formData = {\r",
									"    name: \"admin\",\r",
									"    password: \"12121212\"\r",
									"};\r",
									"\r",
									"const formDataString = Object.keys(formData).map(key => {\r",
									"    return `${encodeURIComponent(key)}=${encodeURIComponent(formData[key])}`;\r",
									"}).join('&');\r",
									"\r",
									"pm.request.body = {\r",
									"    mode: 'urlencoded',\r",
									"    urlencoded: formDataString\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains token\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response have correct admin type\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"user_type\", \"Admin\");\r",
									"    pm.expect(pm.response.json()).to.have.property(\"type_id\", 3);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var token = jsonData.token;\r",
									"pm.environment.set(\"testing-token-admin\", token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "localhost:8000/api/login",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - As operator",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const formData = {\r",
									"    name: \"operator\",\r",
									"    password: \"12121212\"\r",
									"};\r",
									"\r",
									"const formDataString = Object.keys(formData).map(key => {\r",
									"    return `${encodeURIComponent(key)}=${encodeURIComponent(formData[key])}`;\r",
									"}).join('&');\r",
									"\r",
									"pm.request.body = {\r",
									"    mode: 'urlencoded',\r",
									"    urlencoded: formDataString\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains token\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response have correct operator type\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"user_type\", \"Operator\");\r",
									"    pm.expect(pm.response.json()).to.have.property(\"type_id\", 1);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var token = jsonData.token;\r",
									"pm.environment.set(\"testing-token-operator\", token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "localhost:8000/api/login",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Input validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const formData = {\r",
									"    name: \"\",\r",
									"    password: \"\"\r",
									"};\r",
									"\r",
									"const formDataString = Object.keys(formData).map(key => {\r",
									"    return `${encodeURIComponent(key)}=${encodeURIComponent(formData[key])}`;\r",
									"}).join('&');\r",
									"\r",
									"pm.request.body = {\r",
									"    mode: 'urlencoded',\r",
									"    urlencoded: formDataString\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 403\", function () {\r",
									"  pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields - error, message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('error');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "localhost:8000/api/login",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Wrong credentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const formData = {\r",
									"    name: \"amogus\",\r",
									"    password: \"amogus\"\r",
									"};\r",
									"\r",
									"const formDataString = Object.keys(formData).map(key => {\r",
									"    return `${encodeURIComponent(key)}=${encodeURIComponent(formData[key])}`;\r",
									"}).join('&');\r",
									"\r",
									"pm.request.body = {\r",
									"    mode: 'urlencoded',\r",
									"    urlencoded: formDataString\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response have correct message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\", \"Incorrect name or password\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "localhost:8000/api/login",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Get all users",
					"item": [
						{
							"name": "Get all users - Success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const bearerToken = pm.environment.get(\"testing-token-admin\");\r",
											"\r",
											"pm.request.headers.add({\r",
											"    key: \"Authorization\",\r",
											"    value: `Bearer ${bearerToken}`\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields : success, message, and data\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('success');\r",
											"    pm.expect(responseData).to.have.property('message');\r",
											"    pm.expect(responseData).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the correct object - each object should have id_user, name, password and type properties\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.data).to.be.an('array');\r",
											"\r",
											"    responseData.data.forEach(function(user) {\r",
											"        pm.expect(user).to.have.property('id_user');\r",
											"        pm.expect(user).to.have.property('name');\r",
											"        pm.expect(user).to.have.property('password');\r",
											"        pm.expect(user).to.have.property('type');\r",
											"\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/users",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all users - No access",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct message\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"error\");\r",
											"    pm.expect(pm.response.json()).to.have.property(\"message\", \"You do not have access to this page\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "localhost:8000/api/users",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get user by id",
					"item": [
						{
							"name": "Get user by id - Success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const bearerToken = pm.environment.get(\"testing-token-admin\");\r",
											"\r",
											"pm.request.headers.add({\r",
											"    key: \"Authorization\",\r",
											"    value: `Bearer ${bearerToken}`\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields : success, message, and data\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('success');\r",
											"    pm.expect(responseData).to.have.property('message');\r",
											"    pm.expect(responseData).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the correct object - each object should have id_user, name, password and type properties\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.data).to.have.property(\"id_user\");\r",
											"    pm.expect(responseData.data).to.have.property(\"name\");\r",
											"    pm.expect(responseData.data).to.have.property(\"password\");\r",
											"    pm.expect(responseData.data).to.have.property(\"type\");\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/users/1",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"users",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user by id - No user in database",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const bearerToken = pm.environment.get(\"testing-token-admin\");\r",
											"\r",
											"pm.request.headers.add({\r",
											"    key: \"Authorization\",\r",
											"    value: `Bearer ${bearerToken}`\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct message\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"error\", true);\r",
											"    pm.expect(pm.response.json()).to.have.property(\"message\", \"That user does not exist\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/users/5",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"users",
										"5"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user by id - No access",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct message\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"message\", \"You do not have access to this page\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "localhost:8000/api/users/1",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"users",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create new user",
					"item": [
						{
							"name": "Create new user - Success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const bearerToken = pm.environment.get(\"testing-token-admin\");\r",
											"pm.request.headers.add({\r",
											"    key: \"Authorization\",\r",
											"    value: `Bearer ${bearerToken}`\r",
											"});\r",
											"\r",
											"const formData = {\r",
											"    name: \"operator-barus\",\r",
											"    password: \"12121212\",\r",
											"    type: 1,\r",
											"};\r",
											"\r",
											"const formDataString = Object.keys(formData).map(key => {\r",
											"    return `${encodeURIComponent(key)}=${encodeURIComponent(formData[key])}`;\r",
											"}).join('&');\r",
											"\r",
											"pm.request.body = {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: formDataString\r",
											"};"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"  pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields - success, message, and data\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('success');\r",
											"    pm.expect(responseData).to.have.property('message');\r",
											"    pm.expect(responseData).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the correct object - each object should have name, password, type and id_user properties\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.data).to.have.property('name');\r",
											"    pm.expect(responseData.data).to.have.property('password');\r",
											"    pm.expect(responseData.data).to.have.property('type');\r",
											"    pm.expect(responseData.data).to.have.property('id_user');\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/users",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new user - Input Validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const bearerToken = pm.environment.get(\"testing-token-admin\");\r",
											"pm.request.headers.add({\r",
											"    key: \"Authorization\",\r",
											"    value: `Bearer ${bearerToken}`\r",
											"});\r",
											"\r",
											"const formData = {\r",
											"    name: \"\",\r",
											"    password: \"\",\r",
											"    type: \"\",\r",
											"};\r",
											"\r",
											"const formDataString = Object.keys(formData).map(key => {\r",
											"    return `${encodeURIComponent(key)}=${encodeURIComponent(formData[key])}`;\r",
											"}).join('&');\r",
											"\r",
											"pm.request.body = {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: formDataString\r",
											"};"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {\r",
											"  pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields - error, message\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('error');\r",
											"    pm.expect(responseData).to.have.property('message');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/users",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new user - No access",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const formData = {\r",
											"    name: \"\",\r",
											"    password: \"\",\r",
											"    type: \"\",\r",
											"};\r",
											"\r",
											"const formDataString = Object.keys(formData).map(key => {\r",
											"    return `${encodeURIComponent(key)}=${encodeURIComponent(formData[key])}`;\r",
											"}).join('&');\r",
											"\r",
											"pm.request.body = {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: formDataString\r",
											"};"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct message\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"message\", \"You do not have access to this page\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "localhost:8000/api/users",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update user (no password)",
					"item": [
						{
							"name": "Update user (no password) - Success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const bearerToken = pm.environment.get(\"testing-token-admin\");\r",
											"pm.request.headers.add({\r",
											"    key: \"Authorization\",\r",
											"    value: `Bearer ${bearerToken}`\r",
											"});\r",
											"\r",
											"const formData = {\r",
											"    _method: \"PUT\",\r",
											"    name: \"admin\",\r",
											"    type: 3,\r",
											"};\r",
											"\r",
											"const formDataString = Object.keys(formData).map(key => {\r",
											"    return `${encodeURIComponent(key)}=${encodeURIComponent(formData[key])}`;\r",
											"}).join('&');\r",
											"\r",
											"pm.request.body = {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: formDataString\r",
											"};"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields - success, message, and data\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('success');\r",
											"    pm.expect(responseData).to.have.property('message');\r",
											"    pm.expect(responseData).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the correct object - each object should have id_user, name, type properties\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.data).to.have.property('id_user');\r",
											"    pm.expect(responseData.data).to.have.property('name');\r",
											"    pm.expect(responseData.data).to.have.property('password');\r",
											"    pm.expect(responseData.data).to.have.property('type');\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/users/3",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"users",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user (no password) - Input Validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const bearerToken = pm.environment.get(\"testing-token-admin\");\r",
											"pm.request.headers.add({\r",
											"    key: \"Authorization\",\r",
											"    value: `Bearer ${bearerToken}`\r",
											"});\r",
											"\r",
											"const formData = {\r",
											"    _method: \"PUT\",\r",
											"    name: \"\",\r",
											"    type: \"\",\r",
											"};\r",
											"\r",
											"const formDataString = Object.keys(formData).map(key => {\r",
											"    return `${encodeURIComponent(key)}=${encodeURIComponent(formData[key])}`;\r",
											"}).join('&');\r",
											"\r",
											"pm.request.body = {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: formDataString\r",
											"};"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {\r",
											"  pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields - error, message\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('error');\r",
											"    pm.expect(responseData).to.have.property('message');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/users/3",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"users",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user (no password) - No user in database",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const bearerToken = pm.environment.get(\"testing-token-admin\");\r",
											"pm.request.headers.add({\r",
											"    key: \"Authorization\",\r",
											"    value: `Bearer ${bearerToken}`\r",
											"});\r",
											"\r",
											"const formData = {\r",
											"    _method: \"PUT\",\r",
											"    name: \"admin\",\r",
											"    type: 3,\r",
											"};\r",
											"\r",
											"const formDataString = Object.keys(formData).map(key => {\r",
											"    return `${encodeURIComponent(key)}=${encodeURIComponent(formData[key])}`;\r",
											"}).join('&');\r",
											"\r",
											"pm.request.body = {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: formDataString\r",
											"};"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct message\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"error\", true);\r",
											"    pm.expect(pm.response.json()).to.have.property(\"message\", \"That user does not exist\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/users/99",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"users",
										"99"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user (no password) - No access",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const formData = {\r",
											"    _method: \"PUT\",\r",
											"    name: \"admin\",\r",
											"    type: 3,\r",
											"};\r",
											"\r",
											"const formDataString = Object.keys(formData).map(key => {\r",
											"    return `${encodeURIComponent(key)}=${encodeURIComponent(formData[key])}`;\r",
											"}).join('&');\r",
											"\r",
											"pm.request.body = {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: formDataString\r",
											"};"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct message\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"message\", \"You do not have access to this page\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "localhost:8000/api/users/3",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"users",
										"3"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update user password",
					"item": [
						{
							"name": "Update user password - Success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const bearerToken = pm.environment.get(\"testing-token-admin\");\r",
											"pm.request.headers.add({\r",
											"    key: \"Authorization\",\r",
											"    value: `Bearer ${bearerToken}`\r",
											"});\r",
											"\r",
											"const formData = {\r",
											"    _method: \"PUT\",\r",
											"    password: \"12121212\",\r",
											"};\r",
											"\r",
											"const formDataString = Object.keys(formData).map(key => {\r",
											"    return `${encodeURIComponent(key)}=${encodeURIComponent(formData[key])}`;\r",
											"}).join('&');\r",
											"\r",
											"pm.request.body = {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: formDataString\r",
											"};"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields - success, message, and data\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('success');\r",
											"    pm.expect(responseData).to.have.property('message');\r",
											"    pm.expect(responseData).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the correct object - each object should have id_user, name, type properties\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.data).to.have.property('id_user');\r",
											"    pm.expect(responseData.data).to.have.property('name');\r",
											"    pm.expect(responseData.data).to.have.property('password');\r",
											"    pm.expect(responseData.data).to.have.property('type');\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/users/password/3",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"users",
										"password",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user password - Input Validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const bearerToken = pm.environment.get(\"testing-token-admin\");\r",
											"pm.request.headers.add({\r",
											"    key: \"Authorization\",\r",
											"    value: `Bearer ${bearerToken}`\r",
											"});\r",
											"\r",
											"const formData = {\r",
											"    _method: \"PUT\",\r",
											"    password: \"\",\r",
											"};\r",
											"\r",
											"const formDataString = Object.keys(formData).map(key => {\r",
											"    return `${encodeURIComponent(key)}=${encodeURIComponent(formData[key])}`;\r",
											"}).join('&');\r",
											"\r",
											"pm.request.body = {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: formDataString\r",
											"};"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {\r",
											"  pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields - error, message\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('error');\r",
											"    pm.expect(responseData).to.have.property('message');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/users/password/3",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"users",
										"password",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user password - No user in database Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const bearerToken = pm.environment.get(\"testing-token-admin\");\r",
											"pm.request.headers.add({\r",
											"    key: \"Authorization\",\r",
											"    value: `Bearer ${bearerToken}`\r",
											"});\r",
											"\r",
											"const formData = {\r",
											"    _method: \"PUT\",\r",
											"    password: \"12121212\",\r",
											"};\r",
											"\r",
											"const formDataString = Object.keys(formData).map(key => {\r",
											"    return `${encodeURIComponent(key)}=${encodeURIComponent(formData[key])}`;\r",
											"}).join('&');\r",
											"\r",
											"pm.request.body = {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: formDataString\r",
											"};"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct message\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"error\", true);\r",
											"    pm.expect(pm.response.json()).to.have.property(\"message\", \"That user does not exist\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/users/password/99",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"users",
										"password",
										"99"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user password - No access",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const formData = {\r",
											"    _method: \"PUT\",\r",
											"    password: \"12121212\",\r",
											"};\r",
											"\r",
											"const formDataString = Object.keys(formData).map(key => {\r",
											"    return `${encodeURIComponent(key)}=${encodeURIComponent(formData[key])}`;\r",
											"}).join('&');\r",
											"\r",
											"pm.request.body = {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: formDataString\r",
											"};"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct message\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"message\", \"You do not have access to this page\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "localhost:8000/api/users/password/3",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"users",
										"password",
										"3"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete user",
					"item": [
						{
							"name": "Delete user - Success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const bearerToken = pm.environment.get(\"testing-token-admin\");\r",
											"\r",
											"pm.request.headers.add({\r",
											"    key: \"Authorization\",\r",
											"    value: `Bearer ${bearerToken}`\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body schema for successful delete operation\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('success', true);\r",
											"    pm.expect(responseData).to.have.property('message', 'User data deleted successfully');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/users/4",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"users",
										"4"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user - No user in database",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const bearerToken = pm.environment.get(\"testing-token-admin\");\r",
											"\r",
											"pm.request.headers.add({\r",
											"    key: \"Authorization\",\r",
											"    value: `Bearer ${bearerToken}`\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct message\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"error\", true);\r",
											"    pm.expect(pm.response.json()).to.have.property(\"message\", \"That user does not exist\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/users/99",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"users",
										"99"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user - No access",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct message\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"message\", \"You do not have access to this page\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "localhost:8000/api/users/4",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"users",
										"4"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Turrets",
			"item": [
				{
					"name": "Get all turrets",
					"item": [
						{
							"name": "Get all turrets - Success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const bearerToken = pm.environment.get(\"testing-token-operator\");\r",
											"\r",
											"pm.request.headers.add({\r",
											"    key: \"Authorization\",\r",
											"    value: `Bearer ${bearerToken}`\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields : success, message, and data\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('success');\r",
											"    pm.expect(responseData).to.have.property('message');\r",
											"    pm.expect(responseData).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the correct object - each object should have id_turret, image_id, description, secret_url, turret_url and location properties\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.data).to.be.an('array');\r",
											"\r",
											"    responseData.data.forEach(function(turret) {\r",
											"        pm.expect(turret).to.have.property('id_turret');\r",
											"        pm.expect(turret).to.have.property('turret_image');\r",
											"        pm.expect(turret).to.have.property('description');\r",
											"        pm.expect(turret).to.have.property('secret_url');\r",
											"        pm.expect(turret).to.have.property('turret_url');\r",
											"        pm.expect(turret).to.have.property('location');\r",
											"\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/turrets",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"turrets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all turrets - No access",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct message\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"error\");\r",
											"    pm.expect(pm.response.json()).to.have.property(\"message\", \"You do not have access to this page\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "localhost:8000/api/turrets",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"turrets"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get turret by id",
					"item": [
						{
							"name": "Get turret by id - Success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const bearerToken = pm.environment.get(\"testing-token-operator\");\r",
											"\r",
											"pm.request.headers.add({\r",
											"    key: \"Authorization\",\r",
											"    value: `Bearer ${bearerToken}`\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields : success, message, and data\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('success');\r",
											"    pm.expect(responseData).to.have.property('message');\r",
											"    pm.expect(responseData).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the correct object - each object should have id_turret, turret_image, description, secret_url, turret_url and location type properties\", function () {\\\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.data).to.have.property(\"id_turret\");\r",
											"    pm.expect(responseData.data).to.have.property(\"turret_image\");\r",
											"    pm.expect(responseData.data).to.have.property(\"description\");\r",
											"    pm.expect(responseData.data).to.have.property(\"secret_url\");\r",
											"    pm.expect(responseData.data).to.have.property(\"turret_url\");\r",
											"    pm.expect(responseData.data).to.have.property(\"location\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/turrets/1",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"turrets",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get turret by id - No turret in database",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const bearerToken = pm.environment.get(\"testing-token-operator\");\r",
											"\r",
											"pm.request.headers.add({\r",
											"    key: \"Authorization\",\r",
											"    value: `Bearer ${bearerToken}`\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct message\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"error\", true);\r",
											"    pm.expect(pm.response.json()).to.have.property(\"message\", \"That turret does not exist\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"disabled": true
									}
								],
								"url": {
									"raw": "localhost:8000/api/turrets/99",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"turrets",
										"99"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get turret by id - No access",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct message\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"message\", \"You do not have access to this page\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "localhost:8000/api/turrets/1",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"turrets",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create new turret",
					"item": [
						{
							"name": "Create new turret - Sucess",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"  pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields - success, message, and data\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('success');\r",
											"    pm.expect(responseData).to.have.property('message');\r",
											"    pm.expect(responseData).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the correct object - each object should have id_turret, image_id, description, secret_url, turret_url and location properties\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.data).to.have.property('id_turret');\r",
											"    pm.expect(responseData.data).to.have.property('image_id');\r",
											"    pm.expect(responseData.data).to.have.property('description');\r",
											"    pm.expect(responseData.data).to.have.property('secret_url');\r",
											"    pm.expect(responseData.data).to.have.property('turret_url');\r",
											"    pm.expect(responseData.data).to.have.property('location');\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "1NvPm34bgwN7wgw5T4GWA9n0EuKb9G7gwepnpenC1ef09206",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "path",
											"type": "file",
											"src": "postman-cloud:///1ef1a508-0ddf-4370-813f-3238e84d87d2"
										},
										{
											"key": "description",
											"value": "Turret yang ada di sawah api-turret-testing-1",
											"type": "text"
										},
										{
											"key": "secret_url",
											"value": "api-turret-testing-1-key",
											"type": "text"
										},
										{
											"key": "location",
											"value": "Sawah api-turret-testing-1",
											"type": "text"
										},
										{
											"key": "turret_url",
											"value": "turret-url-testing-1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "localhost:8000/api/turrets/",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"turrets",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new turret - Input Validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {\r",
											"  pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields - error, message\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('error');\r",
											"    pm.expect(responseData).to.have.property('message');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "1NvPm34bgwN7wgw5T4GWA9n0EuKb9G7gwepnpenC1ef09206",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "path",
											"type": "file",
											"src": []
										},
										{
											"key": "description",
											"value": "",
											"type": "text"
										},
										{
											"key": "secret_url",
											"value": "",
											"type": "text"
										},
										{
											"key": "location",
											"value": "",
											"type": "text"
										},
										{
											"key": "turret_url",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "localhost:8000/api/turrets/",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"turrets",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new turret - No access",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct message\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"message\", \"You do not have access to this page\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "path",
											"type": "file",
											"src": "postman-cloud:///1ef1a508-0ddf-4370-813f-3238e84d87d2"
										},
										{
											"key": "description",
											"value": "Turret yang ada di sawah api-turret-testing-1",
											"type": "text"
										},
										{
											"key": "secret_url",
											"value": "api-turret-testing-1-key",
											"type": "text"
										},
										{
											"key": "location",
											"value": "Sawah api-turret-testing-1",
											"type": "text"
										},
										{
											"key": "turret_url",
											"value": "turret-url-testing-1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "localhost:8000/api/turrets/",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"turrets",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update turret",
					"item": [
						{
							"name": "Update turret - Sucess",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields - success, message, and data\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('success');\r",
											"    pm.expect(responseData).to.have.property('message');\r",
											"    pm.expect(responseData).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the correct object - each object should have id_turret, image_id, description, secret_url, turret_url and location properties\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.data).to.have.property('id_turret');\r",
											"    pm.expect(responseData.data).to.have.property('image_id');\r",
											"    pm.expect(responseData.data).to.have.property('description');\r",
											"    pm.expect(responseData.data).to.have.property('secret_url');\r",
											"    pm.expect(responseData.data).to.have.property('turret_url');\r",
											"    pm.expect(responseData.data).to.have.property('location');\r",
											"\r",
											"    if (responseData.data.file) {\r",
											"        pm.expect(responseData.data.file).to.have.property('id_file');\r",
											"        pm.expect(responseData.data.file).to.have.property('path');\r",
											"        pm.expect(responseData.data.file).to.have.property('type');\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "1NvPm34bgwN7wgw5T4GWA9n0EuKb9G7gwepnpenC1ef09206",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "_method",
											"value": "PATCH",
											"type": "text"
										},
										{
											"key": "path",
											"type": "file",
											"src": "postman-cloud:///1ef1a508-0ddf-4370-813f-3238e84d87d2"
										},
										{
											"key": "description",
											"value": "Turret yang ada di api-turret-testing-2",
											"type": "text"
										},
										{
											"key": "secret_url",
											"value": "api-turret-testing-2-key",
											"type": "text"
										},
										{
											"key": "location",
											"value": "Sawah api-turret-testing-2",
											"type": "text"
										},
										{
											"key": "turret_url",
											"value": "turret-url-testing-2",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "localhost:8000/api/turrets/4",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"turrets",
										"4"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update turret - Input validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {\r",
											"  pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields - error, message\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('error');\r",
											"    pm.expect(responseData).to.have.property('message');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "1NvPm34bgwN7wgw5T4GWA9n0EuKb9G7gwepnpenC1ef09206",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "_method",
											"value": "PATCH",
											"type": "text"
										},
										{
											"key": "path",
											"type": "file",
											"src": []
										},
										{
											"key": "description",
											"value": "",
											"type": "text"
										},
										{
											"key": "secret_url",
											"value": "",
											"type": "text"
										},
										{
											"key": "location",
											"value": "",
											"type": "text"
										},
										{
											"key": "turret_url",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "localhost:8000/api/turrets/4",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"turrets",
										"4"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update turret - No turret in database",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct message\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"error\", true);\r",
											"    pm.expect(pm.response.json()).to.have.property(\"message\", \"That turret does not exist\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "1NvPm34bgwN7wgw5T4GWA9n0EuKb9G7gwepnpenC1ef09206",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "_method",
											"value": "PATCH",
											"type": "text"
										},
										{
											"key": "path",
											"type": "file",
											"src": "postman-cloud:///1ef1a508-0ddf-4370-813f-3238e84d87d2"
										},
										{
											"key": "description",
											"value": "Turret yang ada di api-turret-testing-2",
											"type": "text"
										},
										{
											"key": "secret_url",
											"value": "api-turret-testing-2-key",
											"type": "text"
										},
										{
											"key": "location",
											"value": "Sawah api-turret-testing-2",
											"type": "text"
										},
										{
											"key": "turret_url",
											"value": "turret-url-testing-2",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "localhost:8000/api/turrets/99",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"turrets",
										"99"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update turret - No access",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct message\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"message\", \"You do not have access to this page\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "_method",
											"value": "PATCH",
											"type": "text"
										},
										{
											"key": "path",
											"type": "file",
											"src": "postman-cloud:///1ef1a508-0ddf-4370-813f-3238e84d87d2"
										},
										{
											"key": "description",
											"value": "Turret yang ada di api-turret-testing-2",
											"type": "text"
										},
										{
											"key": "secret_url",
											"value": "api-turret-testing-2-key",
											"type": "text"
										},
										{
											"key": "location",
											"value": "Sawah api-turret-testing-2",
											"type": "text"
										},
										{
											"key": "turret_url",
											"value": "turret-url-testing-2",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "localhost:8000/api/turrets/4",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"turrets",
										"4"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete turret",
					"item": [
						{
							"name": "Delete turret - Success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct message\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"message\", \"You do not have access to this page\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "localhost:8000/api/turrets/4",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"turrets",
										"4"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete turret - No turret in database",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const bearerToken = pm.environment.get(\"testing-token-operator\");\r",
											"\r",
											"pm.request.headers.add({\r",
											"    key: \"Authorization\",\r",
											"    value: `Bearer ${bearerToken}`\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct message\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"error\", true);\r",
											"    pm.expect(pm.response.json()).to.have.property(\"message\", \"That turret does not exist\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/turrets/99",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"turrets",
										"99"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete turret - No access",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct message\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"message\", \"You do not have access to this page\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "localhost:8000/api/turrets/4",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"turrets",
										"4"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Manual logs",
			"item": [
				{
					"name": "Get all manual logs",
					"item": [
						{
							"name": "Get all manual logs - Success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const bearerToken = pm.environment.get(\"testing-token-admin\");\r",
											"\r",
											"pm.request.headers.add({\r",
											"    key: \"Authorization\",\r",
											"    value: `Bearer ${bearerToken}`\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields : success, message, and data\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('success');\r",
											"    pm.expect(responseData).to.have.property('message');\r",
											"    pm.expect(responseData).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the correct object - each object should have id_manual_log, id_user, user_name, id_turret, turret_image, turret_description, turret_secret_keym turret_location, start_date and end_date properties\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.data).to.be.an('array');\r",
											"\r",
											"    responseData.data.forEach(function(turret) {\r",
											"        pm.expect(turret).to.have.property('id_manual_log');\r",
											"        pm.expect(turret).to.have.property('id_user');\r",
											"        pm.expect(turret).to.have.property('user_name');\r",
											"        pm.expect(turret).to.have.property('id_turret');\r",
											"        pm.expect(turret).to.have.property('turret_image');\r",
											"        pm.expect(turret).to.have.property('turret_description');\r",
											"        pm.expect(turret).to.have.property('turret_secret_key');\r",
											"        pm.expect(turret).to.have.property('turret_location');\r",
											"        pm.expect(turret).to.have.property('start_date');\r",
											"        pm.expect(turret).to.have.property('end_date');\r",
											"\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/mlogs",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"mlogs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all manual logs - No access",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct message\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"message\", \"You do not have access to this page\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "localhost:8000/api/mlogs",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"mlogs"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create new manual log",
					"item": [
						{
							"name": "Create new manual log - Success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const bearerToken = pm.environment.get(\"testing-token-operator\");\r",
											"pm.request.headers.add({\r",
											"    key: \"Authorization\",\r",
											"    value: `Bearer ${bearerToken}`\r",
											"});\r",
											"\r",
											"const formData = {\r",
											"    user_id: 1,\r",
											"    turret_id: 1,\r",
											"    start_date: \"2024-05-07 00:00:00\",\r",
											"    end_date: \"2024-05-07 00:00:00\",\r",
											"};\r",
											"\r",
											"const formDataString = Object.keys(formData).map(key => {\r",
											"    return `${(key)}=${(formData[key])}`;\r",
											"}).join('&');\r",
											"\r",
											"pm.request.body = {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: formDataString\r",
											"};"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"  pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields - success, message, and data\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('success');\r",
											"    pm.expect(responseData).to.have.property('message');\r",
											"    pm.expect(responseData).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the correct object - each object should have id_manual_log, user_id, turret_id, start_date and end_date properties\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.data).to.have.property('id_manual_log');\r",
											"    pm.expect(responseData.data).to.have.property('user_id');\r",
											"    pm.expect(responseData.data).to.have.property('turret_id');\r",
											"    pm.expect(responseData.data).to.have.property('start_date');\r",
											"    pm.expect(responseData.data).to.have.property('end_date');\r",
											"    \r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/mlogs",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"mlogs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new manual log - Input validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const bearerToken = pm.environment.get(\"testing-token-operator\");\r",
											"pm.request.headers.add({\r",
											"    key: \"Authorization\",\r",
											"    value: `Bearer ${bearerToken}`\r",
											"});\r",
											"\r",
											"const formData = {\r",
											"    user_id: \"\",\r",
											"    turret_id: \"\",\r",
											"    start_date: \"\",\r",
											"    end_date: \"\",\r",
											"};\r",
											"\r",
											"const formDataString = Object.keys(formData).map(key => {\r",
											"    return `${(key)}=${(formData[key])}`;\r",
											"}).join('&');\r",
											"\r",
											"pm.request.body = {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: formDataString\r",
											"};"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {\r",
											"  pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields - error, message\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('error');\r",
											"    pm.expect(responseData).to.have.property('message');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/mlogs",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"mlogs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new manual log - No access",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct message\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"message\", \"You do not have access to this page\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "localhost:8000/api/mlogs",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"mlogs"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Logs",
			"item": [
				{
					"name": "Get all logs",
					"item": [
						{
							"name": "Get all logs - Success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const bearerToken = pm.environment.get(\"testing-token-operator\");\r",
											"\r",
											"pm.request.headers.add({\r",
											"    key: \"Authorization\",\r",
											"    value: `Bearer ${bearerToken}`\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields : success, message, and data\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('success');\r",
											"    pm.expect(responseData).to.have.property('message');\r",
											"    pm.expect(responseData).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the correct object - each object should have id_log, turret_id, image, location, object_type, and shot_date properties\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.data).to.be.an('array');\r",
											"\r",
											"    responseData.data.forEach(function(log) {\r",
											"        pm.expect(log).to.have.property('id_log');\r",
											"        pm.expect(log).to.have.property('turret_id');\r",
											"        pm.expect(log).to.have.property('image');\r",
											"        pm.expect(log).to.have.property('location');\r",
											"        pm.expect(log).to.have.property('object_type');\r",
											"        pm.expect(log).to.have.property('shot_date');\r",
											"\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/logs",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"logs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all logs - No access",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct message\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"message\", \"You do not have access to this page\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "localhost:8000/api/logs",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"logs"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create new log",
					"item": [
						{
							"name": "Create new log - Success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"  pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields - success, message, and data\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('success');\r",
											"    pm.expect(responseData).to.have.property('message');\r",
											"    pm.expect(responseData).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Validate the data array - each object should have id_log, turret_id, image_id, location, object_type and shot_date properties\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.data).to.have.property('id_log');\r",
											"    pm.expect(responseData.data).to.have.property('turret_id');\r",
											"    pm.expect(responseData.data).to.have.property('image_id');\r",
											"    pm.expect(responseData.data).to.have.property('location');\r",
											"    pm.expect(responseData.data).to.have.property('object_type');\r",
											"    pm.expect(responseData.data).to.have.property('shot_date');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "path",
											"type": "file",
											"src": "postman-cloud:///1ef1a508-0ddf-4370-813f-3238e84d87d2"
										},
										{
											"key": "turret_id",
											"value": "1",
											"type": "text"
										},
										{
											"key": "location",
											"value": "Sawah 1",
											"type": "text"
										},
										{
											"key": "object_type",
											"value": "Bird",
											"type": "text"
										},
										{
											"key": "shot_date",
											"value": "2024-05-07 00:00:00",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "localhost:8000/api/logs",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"logs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new log - Input Validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {\r",
											"  pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields - error, message\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('error');\r",
											"    pm.expect(responseData).to.have.property('message');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "path",
											"type": "file",
											"src": []
										},
										{
											"key": "turret_id",
											"value": "",
											"type": "text"
										},
										{
											"key": "location",
											"value": "",
											"type": "text"
										},
										{
											"key": "object_type",
											"value": "",
											"type": "text"
										},
										{
											"key": "shot_date",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "localhost:8000/api/logs",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"logs"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Logout",
			"item": [
				{
					"name": "Logout - As admin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const bearerToken = pm.environment.get(\"testing-token-admin\");\r",
									"\r",
									"pm.request.headers.add({\r",
									"    key: \"Authorization\",\r",
									"    value: `Bearer ${bearerToken}`\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body schema for successful logout operation\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('message', 'Logout success');\r",
									"});\r",
									"\r",
									"pm.environment.unset(\"testing-token-admin\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "localhost:8000/api/logout",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout - As operator",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const bearerToken = pm.environment.get(\"testing-token-operator\");\r",
									"\r",
									"pm.request.headers.add({\r",
									"    key: \"Authorization\",\r",
									"    value: `Bearer ${bearerToken}`\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body schema for successful logout operation\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('message', 'Logout success');\r",
									"});\r",
									"\r",
									"pm.environment.unset(\"testing-token-operator\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "localhost:8000/api/logout",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout - No access",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response have correct message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\", \"You do not have access to this page\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "localhost:8000/api/logout",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}